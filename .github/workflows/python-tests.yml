# .github/workflows/python-tests.yml

name: Run Python Tests

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
      # Step 1: Check out code
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Set up Python WITHOUT Poetry caching initially
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Step 3: Install Poetry
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # Step 4: Get Poetry virtualenv path
      - name: Get poetry virtualenv path
        id: poetry-venv-path
        run: echo "path=$(poetry env info --path)" >> $GITHUB_OUTPUT


      # Step 5: Set up Poetry dependency cache using actions/cache
      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        id: cache-poetry-venv
        with:
          # noinspection UndefinedParamsPresent
          path: ${{ steps.poetry-venv-path.outputs.path }}
          key: ${{ runner.os }}-poetry-venv-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-venv-${{ matrix.python-version }}-

      # Step 6: Install dependencies
      - name: Install dependencies
        run: poetry install --no-interaction --no-root --sync

      # Step 7: Run tests
      - name: Run tests
        run: poetry run pytest -v